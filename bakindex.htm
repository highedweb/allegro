<!DOCTYPE html>
<html lang="en">
  <head>
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
    <link rel="icon" href="http://www.oregonmetro.gov/favicon.ico" type="image/x-icon">
    <meta charset="utf-8">
    <title>RISE Prototype</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <link href="//library.oregonmetro.gov/libraries/bootstrap/2.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="//library.oregonmetro.gov/libraries/bootstrap/2.3.2/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="//library.oregonmetro.gov/libraries/metro/rlis/css/metro-bootstrap-fix-new.css" rel="stylesheet">
    <link href="//library.oregonmetro.gov/libraries/metro/rlis/css/autosuggest.css" rel="stylesheet">
    <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/mapbox/1.6.3/mapbox.css" />
    <!-- <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/leaflet.markercluster/0.4/MarkerCluster.css" /> -->
    <!--  <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/leaflet.markercluster/0.4/MarkerCluster.Default.css" /> -->
    <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/leaflet.fullscreen/Control.FullScreen.css" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/leaflet.awesome-markers/leaflet.awesome-markers.css" />
    <link rel="stylesheet" href="//localhost/context/src/jquery.ContextMenu.css" />
   <link rel="stylesheet" href="//library.oregonmetro.gov/libraries/bootstrap-select/1.3.1/css/bootstrap-select.min.css" /> 

    <style type="text/css">
   
     .btn{ padding: 5px 10px;margin: 2px;opacity: .9;background-color: #fff;font-size: 12px;width: 110px;border-radius: 6px;}
           .btn.active {
               border: 1px solid #999;
               color: #FEFEFE;
               background-color:#555;
                text-shadow:none;
           }
           .btn:hover {
               border: #888 1px solid;
           }
          
           .btn.active:hover {
               border: 1px solid #CCC;
               color: #FEFEFE;
           }
           
           #maps > button > div {
               vertical-align: middle;
               background-position: 0% 100%;
               float:left;
               margin-right: 5px;
           }
       
           #maps > button.active > div{
            background-position: 0% 0%;
            }



#labels{
  float: left;
  padding-right: 15px;
   margin:2px;
   clear:both;
}
#symbols{
  float: right;
}
.symbolBox{
  width:20px;
  height:20px;
  margin:2px;
}
#legend{
 border:1px solid #CCC;
 border-radius:5px;
padding:5px;
height:542px;
overflow-y:auto;
}

.legend{
  margin-left:5px;
}

.legend-item{
margin-left:5px;
  overflow:auto;
}

 .img-block{
 transition-property: border-color;
 transition-duration: .2s;
  transition-timing-function: linear;
  border:2px solid #EEE;
  border-radius: 12px;
  padding:7px;
  margin:5px;
  width:140px;
  height:140px;
  position: relative;
  cursor:pointer;
  float:left;
  }

  .img-block:hover{
  border-color:#BBB;
  }

  .img-block.active{
  border:2px solid #6896AC;
  }

.caption {
  opacity: 1;
  transition: background-color 0.2s linear;
  position: absolute;
  bottom: 0;
  left: 0;
  color:#222;
  border-bottom-right-radius: 9px;
  border-bottom-left-radius: 9px;
  background-color:#FFF;
  width: 148px;
  height: 31px;
  padding-left:6px;
  font-size:11px;
  line-height:13px;
  padding-top:3px;
}

caption.active{
opacity: 1;
}

.caption.hover{
background-color:#EEE;
    transition: background-color 0.2s linear;
}

.palette {
cursor: pointer;
display: inline-block;
vertical-align: bottom;
margin: 1px 1px 1px 1px;
padding: 1px;
background: #fff;
border: solid 1px #aaa;
}

.swatch {
display: block;
vertical-align: middle;
width: 15px;
float:left;
height: 12px;
}
      </style>
         
    </head>
<body>
  <div class="navbar navbar-fixed-top">
      <div class="navbar-inner" >
      </div>
      <div id='brc'>
        <ul class="breadcrumb">
        <li><a href="//www.oregonmetro.gov/">Metro</a> <span class="divider">&gt;</span></li>
        <li><a href="//gis.oregonmetro.gov/">GIS</a> <span class="divider">&gt;</span></li>
        <li class='active'>RISE Map</li>
        </ul>
      </div>
  </div>

    <div class="container-fluid">
      <div class="row-fluid">
        <div class='span10 offset1'>
          <h2>RISE Protoype</h2>
          <hr/>
          <ul>
            <li>Enter an address or place in the search bar.</li>
            <li>Select map layers using the 'Add Data' button. </li>
          </ul>
        </div>
      </div>
      <div class="row-fluid">
        <div class='span10 offset1'>
          <div class="input-prepend" style='float:left;' >
            <span class="add-on"><i class="icon-map-marker"></i> Search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
            <input class="span12 input_app" id="bikeTo" type="text" placeholder="Enter an address or place..."/>
          </div>
          <button class='btn' style='float:left;margin:0 0 0 100px;padding:4px;' id='btnAddData'><i class="icon-plus"></i> Add Data</button>
          <button class='btn' style='float:left;margin:0 0 0 100px;padding:4px;' id='btnChangeSymbol'><i class="icon-plus"></i> Change Symbol</button>
        </div>
      </div>
      <div class="row-fluid">
        <div class='span2 offset1' id='legend'>
        </div>

        <div class='span8'>
          <div id="map-area" style='border:1px solid #d3d3d3;padding:10px;border-radius:5px;'>
            <div id="map" style="background-color:#fff;width:100%;height:500px;"></div>              
          </div>
        </div>
      </div>
    </div>

<div class="btn-group" data-toggle="buttons-radio" id="basemap">
    <button type="button" class="btn active " id="btnRoads">Roads</button>
    <button type="button" class="btn " id="btnAerial" style='padding:1px;'>Air Photo<br/>
    
    <span style='font-size:11px;' id='lblLabels' class='muted'>
     <input type='checkbox' id='chkLabels' style='margin:0;' disabled='disabled'/>Labels
                  
    </span></button>
</div>  

<div class="modal hide fade" id="dataModal">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">Add Data</h4>
         </div>
         <div class="modal-body">
            <ul id="aboutTabs" class="nav nav-tabs">
               <li class="active"><a href="#rlis" data-toggle="tab"><i class="fa fa-check-circle-o"></i>&nbsp;RLIS</a></li>
               <li><a href="#other" data-toggle="tab"><i class="fa fa-check-circle-o"></i>&nbsp;RISE</a></li>
            </ul>
            <div class="tab-content" style="padding-top: 10px;max-height:300px;">
               <div class="tab-pane fade active in" id="rlis">
               </div>
               <div class="tab-pane fade" id="other">
               </div>
            </div>
          
         </div>
      </div>
      <div class="modal-footer">
         <button type="button" class="btn btn-default" data-dismiss="modal" id='btnCancel'>Cancel</button>
         <button type="button" class="btn btn-primary" id="btnSubmit">Submit</button>
      </div>
   </div>
</div>

<div class="modal hide fade" id="basemapModal">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title">Add Data</h4>
         </div>
         <div class="modal-body">
            <ul id="aboutTabs" class="nav nav-tabs">
              
            </ul>
            <div class="tab-content" style="padding-top: 10px;max-height:300px;">
               
            </div>
          
         </div>
      </div>
      <div class="modal-footer">
         <button type="button" class="btn btn-default" data-dismiss="modal" id='btnCancel'>Cancel</button>
         <button type="button" class="btn btn-primary" id="btnSubmit">Submit</button>
      </div>
   </div>
</div>

<div class='modal hide fade' id='symbolModal'>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">Change Symbol</h4>
      </div>
      <div class="modal-body" style='min-height:300px;'>
      <ul id="aboutTabs" class="nav nav-tabs">
              <li class="active"><a href="#singleFill" data-toggle="tab"><i class="fa fa-check-circle-o"></i>&nbsp;Single Color</a></li>
              <li><a href="#uniqueValues" data-toggle="tab"><i class="fa fa-check-circle-o"></i>&nbsp;Unique Values</a></li> 
              <li><a href="#classBreaks" data-toggle="tab"><i class="fa fa-check-circle-o"></i>&nbsp;Class Breaks</a></li> 
      </ul>
      <div class="tab-content" style="max-height:300px;">
               <div class="tab-pane fade active in" id="singleFill">
               Fill: <input type="color" name="favcolor"><br/>
               Stroke: <input type="color" name="favcolor"><br/>
               Stroke Thickness: <input type="number" name="quantity" min="1" max="5">

               </div>
               <div class="tab-pane fade" id="uniqueValues" style='height:242px'>
              Color Ramp: &nbsp;<div class="dropdown" style='display:inline-block;'>
        <button class='btn' data-target="#" data-toggle="dropdown" class="dropdown-toggle" id='selUVGradient' style='width:173px;'> <b class="caret"></b></button>
        <ul class="dropdown-menu" id='lstUVRamps' style='height:190px;overflow-y:scroll;'>
        </ul>
        </div><br/>
        Field: &nbsp;  
        <select class="selectpicker selField" id='selUVField'></select>

               </div>
               <div class="tab-pane fade" id="classBreaks" style='height:242px'>
                Color Ramp: &nbsp;<div class="dropdown" style='display:inline-block;'>
                <button class='btn' data-target='#' data-toggle="dropdown" class="dropdown-toggle" id='selCBGradient' style='width:173px;'> <b class="caret"></b></button>
                <ul class="dropdown-menu" id='lstCBRamps' style='height:190px;overflow-y:scroll;'>
              </ul>
                </div>
<br/>
        Field: &nbsp; 
        <select class="selectpicker selField" id='selCBField'></select>
        <br/>
        Classification method: &nbsp; <select class="selectpicker" id='selCBMethod'>
                                        <option>Natural Breaks</option>
                                        <option>Equal Interval</option>
                                      </select>

               </div>
         </div>
      </div>
    <div class="modal-footer">
         <button type="button" class="btn btn-default" data-dismiss="modal" id='btnCancel'>Cancel</button>
         <button type="button" class="btn btn-primary" id="btnSubmit">Submit</button>
    </div>
    </div>
  </div>
</div>
    <br/><br/><br/>
    <footer>
            <p class="muted text-center">
                <a href="http://www.oregonmetro.gov/">&copy; 2013 Oregon Metro</a>
            </p>
        </footer>
     <script src="//library.oregonmetro.gov/libraries/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
     <script src="//library.oregonmetro.gov/libraries/mapbox/1.6.3/mapbox.js" type="text/javascript"></script>
     <script src="//gis.oregonmetro.gov/rlisapi2/js/?token=GYJZSQrfbb8YrZ_RIn-64Kc1SpybpK4LpW4TenvGQmk." type="text/javascript"></script>
     <script src="//library.oregonmetro.gov/libraries/bootstrap/2.3.2/js/bootstrap.min.js" type="text/javascript"></script>
     <script type="text/javascript" src="//library.oregonmetro.gov/libraries/leaflet.fullscreen/Control.FullScreen.js"></script>
        <script type="text/javascript" src="//library.oregonmetro.gov/libraries/leaflet-hash/leaflet-hash.js"></script>
        <script type="text/javascript" src="//library.oregonmetro.gov/libraries/leaflet.shapefile/shp.min.js"></script>
        <script type="text/javascript" src="//library.oregonmetro.gov/libraries/colorbrewer/colorbrewer.js"></script>
        <script type="text/javascript" src="//library.oregonmetro.gov/libraries/bootstrap-select/1.3.1/js/bootstrap-select.min.js"></script>
        <script type="text/javascript" src="//localhost/context/src/jquery.contextMenu.js"></script>
      
 <script type="text/javascript">

      var map, points_layer, base, baseAnno, photo;

      var STYLE_KEYWORDS = ['marker-size', 'marker-symbol', 'marker-color', 'stroke', 'stroke-opacity', 'stroke-width', 'fill', 'fill-opacity'];

      function initMap() {
           
          var subDomains = ['gistiles1', 'gistiles2', 'gistiles3', 'gistiles4'];

          baseAll = new L.TileLayer('//{s}.oregonmetro.gov/ArcGIS/rest/services/metromap/baseAll/MapServer/tile/{z}/{y}/{x}/?token=' + RLIS.token, { zIndex: 10, subdomains:subDomains });
		      baseAnno = new L.TileLayer('//{s}.oregonmetro.gov/ArcGIS/rest/services/metromap/baseAnno/MapServer/tile/{z}/{y}/{x}/?token='+RLIS.token, {zIndex:9100, subdomains:subDomains});
		      photo = new L.TileLayer('//{s}.oregonmetro.gov/ArcGIS/rest/services/photo/2013aerialphoto/MapServer/tile/{z}/{y}/{x}/?token='+RLIS.token, {maxZoom:19,zIndex:10, subdomains:subDomains});

          map = new L.Map('map', {
               center: new L.LatLng(45.44944, -122.67599),
               zoom: 10,
               minZoom: 9,
               maxZoom: 19,
               layers: [baseAll],
               fullscreenControl: true
           });
    
          var basemaps = L.Control.extend({
                  options: {
                      position: 'topright'
                  },

                  onAdd: function (map) {
                      var basemapcontainer = L.DomUtil.get('basemap');
                      L.DomEvent.disableClickPropagation(basemapcontainer);
                      return basemapcontainer;
                  }
              });

          map.addControl(new basemaps());
          L.control.scale().addTo(map);
          var hash = new L.Hash(map);
      }

      $(document).ready(function () {

        $('.selectpicker').selectpicker();

        $('#btnAddData').click(function(){
              $('#dataModal').modal('show');
          });

        for (theme in config.layers){
          for(layer in config.layers[theme]){

            var graphic_prefix = 'http://library.oregonmetro.gov/rlisdiscovery/browse_graphic/';
            
            var thumb = graphic_prefix+config.layers[theme][layer].thumb;
             $('#rlis').append("<img class='idata' src='"+thumb+"' alt='"+config.layers[theme][layer].name+"' id='img"+layer+"'/>");
          }
        }

        for(ramp in colorbrewer){
            if(typeof(colorbrewer[ramp]['9']) != 'undefined'){
              var $li = $('<li></li>');
              var $span = $('<span class="palette" title="'+ramp+'"></span>')
              for(col in colorbrewer[ramp]['9']){
                $span.append('<span class="swatch" style="background-color: '+colorbrewer[ramp][9][col]+';"></span>')
              }
              $li.append($span);
              $('#lstUVRamps').append($li);
              $('#lstCBRamps').append($li.clone());
            }
        }

        $('.idata').wrap("<div class='img-block'></div>" );

        $(".img-block" ).each(function( index ) {
          $(this).prepend("<div class='caption'>"+$(this).find('.idata').attr('alt')+"</div>");
        });


        $('.img-block').on('click', function(){
            if($(this).hasClass('active')){

            $(this).removeClass('active');

            var id=$(this).find('img').attr('id').replace('img','');
            layer = getLayerById(id);
            map.removeLayer(layer.mapLayer);
            $('#leg'+id).remove();
          }
        else
        {
          var id=$(this).find('img').attr('id').replace('img','');

          $(this).addClass('active');
          var layer = getLayerById(id);
          if (typeof(layer.mapLayer) != 'undefined'){
            map.addLayer(layer.mapLayer);
            $('#legend').prepend(layer.HTMLLegend);
          }
          else
          {
            addData(layer);
          }
        }
        });

        $('.img-block').hover(
            function(){
              $(this).find('.caption').addClass('hover');
            },
            function(){
              $(this).find('.caption').removeClass('hover');
            }
          );

          $('#btnAerial').click(function() {
            $(this).addClass('active');
            $('#btnRoads').removeClass('active');
            map.addLayer(photo);
            map.removeLayer(baseAll);
              $('#lblLabels').removeClass('muted');
            if($('#chkLabels').is(':checked')){
              map.addLayer(baseAnno);
            }

            $('#chkLabels').removeAttr('disabled');
          });
                          
          $('#btnRoads').click(function() {
            $(this).addClass('active');
            $('#btnAerial').removeClass('active');
            map.removeLayer(photo);
            map.removeLayer(baseAnno);
            map.addLayer(baseAll)
            $('#chkLabels').attr('disabled', 'disabled');
            $('#lblLabels').addClass('muted');
          });

          $('#chkLabels').click(function(){
              if($(this).is(':checked')){
                map.addLayer(baseAnno);
              }else{
                map.removeLayer(baseAnno);
              }
            })

          var x= new RLIS.Autosuggest("bikeTo", {"mode":'locate','entries':7} ,function (result, error){
      			if (error) {
      			    alert(error);
      			    return;
            }

            map.setView([result[0].lat, result[0].lng],15);
           });
        
        initMap();

       });
       
      function addData(layerObject){

        //Is this a tiled layer or a JSON layer or....?
        //See if it already exists in the global namespace
        switch(layerObject.type){

          case "geojson":
            loadGeoJSON(layerObject);
            break;
          case "tilejson":
            loadTileJSON(layerObject);
            break;
          case "AGSTiles":
            layerObject.mapOptions = layerObject.mapOptions || {};
            layerObject.mapLayer = new L.TileLayer(layerObject.url+'?token=' + RLIS.token, layerObject.mapOptions).addTo(map);
          break;
          case "shapefile":

            layerObject.callback = function(data){
              parseGeoJSON(data, layerObject);
            };

            loadShapefile(layerObject);
        }
      }

      function loadGeoJSON(options) {

        $.getJSON(options.url, function (data) {
            parseGeoJSON(data, options)
          });
      }

      function getLayerById(id){
        for (theme in config.layers){
          for(layer in config.layers[theme]){
            if (layer==id){
              return config.layers[theme][layer];
            }
          }
        }
      }

      function parseGeoJSON(data, options){
        _GeoJSON = {};
        if (typeof(options.legend) != 'undefined'){
          data.legend = options.legend;
          if(typeof(data.legend.title)=='undefined'){
            data.legend.title = options.name;
          }
        } else {
          data.legend = {"symbols": [], "title" : options.name};
        }

        _onEachFeature = function(feature, layer) {
                          if (feature.properties) {
                            layer.bindPopup(Object.keys(feature.properties).map(function(k){
                              if($.inArray(k,STYLE_KEYWORDS)==-1){
                              return '<b>'+k + "</b>: " + feature.properties[k]+'<br/>' ;}
                            }).join(""),{maxHeight:200});
                            }
                          };

        //does it have simpleStyle defined?
        //https://github.com/mapbox/simplestyle-spec/tree/master/1.1.0
        //Nothing more to do here, handle it with the mapbox style api
        if (hasSimpleStyle(data.features[0].properties)) {
            _GeoJSON = L.geoJson(data, {
                style: L.mapbox.simplestyle.style,
                onEachFeature: _onEachFeature
            });
        }
        else {
          switch (data.features[0].geometry.type) {

            case "Point":
              _GeoJSON= L.geoJson(data, {
                  pointToLayer: function (feature, latlng) {
                      return L.circleMarker(latlng, {
                          radius: 5,
                          fillColor: (data.legend.symbols.length>0) ? styleSymbolsFromLegend(feature.properties[options.symbolField], data.legend) : styleFactory(feature, options.ramp, options.symbolField, data.legend),
                          fillOpacity: 1,
                          stroke: true,
                          weight: 1,
                          opacity: 1,
                          color: '#FFF'
                      });
                  },
                  onEachFeature: _onEachFeature
              });
              break;
            case "Polyline":
            case "Polygon":
            case "MultiPolygon":
              var _ramp = colorbrewer[pickRandomProperty(colorbrewer)];
              options.ramp = _ramp[pickRandomProperty(_ramp)];
              _GeoJSON = L.geoJson(data, {
                  style: (data.legend.symbols.length>0) ? function(feature){
                     return {
                      fillColor:styleSymbolsFromLegend(feature.properties[options.symbolField], data.legend),
                          fillOpacity: 1,
                          stroke: true,
                          weight: 1,
                          opacity: 1,
                          color: "#FFF"
                      };
                  } : function(feature){
                     return {
                          fillColor: styleFactory(feature, options.ramp, options.symbolField, data.legend),
                          fillOpacity: 1,
                          stroke: true,
                          weight: 1,
                          opacity: 1,
                          color: '#CCC'
                      };
                  },
                  onEachFeature: _onEachFeature
            });
          }
        }

        //does it have a legend?
        if (typeof(data.legend) != 'undefined'){
         options.HTMLLegend = createLegend(data,options);
        }else{
          options.symbolField = options.symbolField || '';
          options.HTMLLegend = createImpromptuLegend(options.name, 'Polygon',{value:options.symbolField, color:_GeoJSON.options.style.fillColor} );
        }

        options.mapLayer = _GeoJSON.addTo(map);

        $('#chk' + options.name.replace(/\s/g, '_')).on('click', function () {
             if ($(this).is(':checked')) {
                 options.mapLayer.addTo(map).bringToBack();
             } else {
                 map.removeLayer(options.mapLayer)
             }
         });
      }
      
      function loadTileJSON(options){
        $.getJSON(options.url,function(data){

            //Add to legend
            if(typeof(data.legend) != 'undefined'){
              $('#legend').append('<input type="checkbox" checked="checked" style="clear:both;width: 25px; height:25px;float:left;margin-right:10px;" id="chk'+options.name.replace(/\s/g,'_')+'">'+options.name+'<br/>'+ data.legend);
            }

            //test for canonicalURL
            return new L.TileLayer(data.canonicalURL+'?token='+RLIS.token, options.mapOptions).addTo(map);
        })
      }

      function loadShapefile(options){

        //Check in local storage first
        var localGeoJSON =localStorage.getObject(options.url);
  
        if (localGeoJSON != null && typeof(localGeoJSON) != 'undefined'){
          parseGeoJSON(localGeoJSON, options);
          return;
        }

        var xhr = new XMLHttpRequest(),
                reader = new FileReader();
         
         //url_prefix = 'data/';
            xhr.open("GET", options.url, true);
            // Set the responseType to blob
            xhr.responseType = "blob";
         
            xhr.addEventListener("load", function () {
                if (xhr.status === 200) {
                    // onload needed since Google Chrome doesn't support addEventListener for FileReader
                    reader.onload = function (e) {
                        var ext;
                        if (reader.readyState !== 2 || reader.error) {
                            return;
                        } else {
                            shp(reader.result).then(function(data) {

                              //cache geojson in localstorage
                              try{
                              localStorage.setObject(options.url, data);
                              }
                              catch(ex){
                                //alert('unable to store this in local storage');
                              }
                              options.callback(data);
                            });
                            //.then(function (data) {
                                //console.log('bon');
                               // console.log(z);
                            //});
                          //worker.data([reader.result, file.name.slice(0, (0 - (ext.length + 1)))], [reader.result]).then(function(data) {
                          //  console.log(data);
                          //  });
                        }
                    }
                    // Load blob as Data URL
                    reader.readAsArrayBuffer(xhr.response);
                }
            }, false);
            // Send XHR
            xhr.send();
      }

      function hasSimpleStyle(featureProperties){
        for(prop in featureProperties){
          if($.inArray(prop, STYLE_KEYWORDS)>-1){
            return true;
          }
        }
        return false;
      }

      function createLegend(geojson, options){
            
          var legend = '<div class="legend-item" id="leg'+options.name.replace(/\s/g,'_')+'">';
          var id = geojson.legend.title.replace(/\s/g,'_');
          legend +='<label id="lbl'+id+'""><input type="checkbox" id="chk'+id+'" style="clear:both;float:left;" checked="checked"/>&nbsp;&nbsp;<b>'+geojson.legend.title+'</b></label>';
          var geom = geojson.features[0].geometry.type;
          
          geojson.legend.symbols.sort(compare);

          geojson.legend.symbols.forEach(function(symbol){
         
          legend+=legendFactory(geom, symbol.value, symbol.color)
          })

          legend+='</div>';

          $('#legend').prepend(legend);

          applyContextMenu('#lbl'+id);

          return legend;
      }

      function legendFactory(geom, value, color){

        switch (geom){
          case "Point":
            return '<div class="legend"><svg width="16" height="14">'
                    +'<circle cx="6.5" cy="8" r="5.8" stroke="#777" stroke-width="1" fill="'+color+'" />'
                    +'</svg> '+value+'</div>';
          case "Polygon":
            return '<div class="legend">'
                +'<svg width="16" height="14">'
                +'<rect width="12" height="12" fill='+color+' stroke-width="1" stroke="#777">'
                +'</svg> '+value+'</div>';
          return 
          }
      }

      function createImpromptuLegend(title, geom, symbol){
          var id = title.replace(/\s/g,'_');
          var legend = '<div class="legend-item" id="leg'+id+'">';
          legend +='<label><input type="checkbox" id="chk'+id+'" style="clear:both;float:left;" checked="checked"/>&nbsp;&nbsp;<b>'+title+'</b></label>';
          
          legend+=legendFactory(geom, symbol.value, symbol.color)

          legend+='</div>';

          $('#legend').prepend(legend);

          applyContextMenu('#chk'+id);

          return legend;
      }

      function styleSymbolsFromLegend(value, legend){
        if (!value){return '#777';}
        for(var i=0;i<legend.symbols.length;i++){
          if(isNaN(legend.symbols[i].value)){
            if(legend.symbols[i].value.toUpperCase()==value.toUpperCase()){
               return legend.symbols[i].color;
             }
          }
          else if(legend.symbols[i].value == value){
              return legend.symbols[i].color;
            }
          else{
            //die
          }
        }
      }

      function styleFactory(feature, ramp, symbolField, dataLegend){

        //ensure that we haven't symbolized this multipart feature yet.
        for(var i=0;i<dataLegend.symbols.length;i++){
            if(dataLegend.symbols[i].value==feature.properties[symbolField]){
              return dataLegend.symbols[i].color;
            }
        }

        var ran = Math.floor(Math.random() * ramp.length)
        var color= ramp[ran];
        //build the legend while we're here
        dataLegend.symbols.push({"value": feature.properties[symbolField], "color":color});
        return color;
      }

      function style(feature) {
          return {
              fillColor: getRandomColor(),
              fillOpacity: 1,
              stroke: true,
              weight: 1,
              opacity: 1,
              color: '#FFF'
          };
      }

      function updateLegend(e){



      }

      function applyContextMenu(id){

        $.contextMenu({
          selector: id, 
          callback: function(key, options) {
            var m = "global: " + key;
            window.console && console.log(m) || alert(m); 
          },
          items: {
            "edit": {
              name: "Change Symbol", 
              callback: function(key, options) {
                var id = options.selector.replace('#lbl', '');
                var layer = getLayerById(id);
                
                var $span = $('<span class="palette"></span>')
                for(col in layer.ramp){
                  $span.append('<span class="swatch" style="background-color: '+layer.ramp[col]+';"></span>')
                }

                if(!$($('#selUVGradient').children()[0]).is('b')){
                  $('#selUVGradient span').first().remove();
                  $('#selCBGradient span').first().remove();
                }
                
                $('#selUVGradient').prepend($span);
                $('#selCBGradient').prepend($span);

                $.each(layer.fields, function(key, value) {   
                 $('#selUVField')
                     .append($("<option></option>")
                     .attr("value",value)
                     .text(value)); 
                  });

                $.each(layer.fields, function(key, value) {   
                 $('#selCBField')
                     .append($("<option></option>")
                     .attr("value",value)
                     .text(value)); 
                });

                $('.selectpicker').selectpicker('refresh');

                //strip any handlers from selGradient and create new to match correct layer
                $('.palette').on('click', function(e){
                  var ramp = $(this).attr('title');
                  layer.ramp = colorbrewer[ramp]['9'];
                  var $span = $('<span class="palette"></span>')
                  for(col in layer.ramp){
                    $span.append('<span class="swatch" style="background-color: '+layer.ramp[col]+';"></span>')
                  }

                  $('#selUVGradient span').first().remove();
                  $('#selUVGradient').prepend($span);

                  layer.mapLayer.setStyle(function(feature){
                     return {
                          fillColor: styleFactory(feature, layer.ramp, layer.symbolField, layer.legend),
                          fillOpacity: 1,
                          stroke: true,
                          weight: 1,
                          opacity: 1,
                          color: '#CCC'
                      };})
                  });

                $('#symbolModal').modal('show'); 
              }
            }            
          }
        });
      }

      Storage.prototype.setObject = function(key, value) {
          this.setItem(key, JSON.stringify(value));
      }

      Storage.prototype.getObject = function(key) {
          var value = this.getItem(key);
          return value && JSON.parse(value);
      }

      function pickRandomProperty(obj) {
          var result;
          var count = 0;
          for (var prop in obj)
              if (Math.random() < 1/++count)
                 result = prop;
          return result;
      }

      function compare(a,b) {
        if (a.value < b.value)
           return -1;
        if (a.value > b.value)
          return 1;
        return 0;
      }

      </script>

      <script>

 var config={
    'layers': {
        'Boundary': {
            'City_Limits': {
                'name': 'City Limits',
                'url': '//library.oregonmetro.gov/rlisdiscovery/cty_fill.zip',
                'type': 'shapefile',
                'thumb': 'cty_fill.png',
                'symbolField': 'CITYNAME'
            },
            'Metro_Council_Districts_1979_to_1981': {
              'name': 'Metro Council Districts 1979 to 1981',
              'url': '//library.oregonmetro.gov/rlisdiscovery/council1979.zip',
              'type': 'shapefile',
              'thumb': 'council.png',
              "symbolField": "DISTRICT"
            },
            'Metro_Council_Districts_1982_to_1992': {
              'name': 'Metro Council Districts 1982 to 1992',
              'url': '//library.oregonmetro.gov/rlisdiscovery/council1982.zip',
              'type': 'shapefile',
              'thumb': 'council.png',
              "symbolField": "DISTRICT"
            },
            'Metro_Council_Districts_1993_to_1994': {
              'name': 'Metro Council Districts 1993 to 1994',
              'url': '//library.oregonmetro.gov/rlisdiscovery/council1993.zip',
              'type': 'shapefile',
              'thumb': 'council.png',
              "symbolField": "DISTRICT"
            },
            'Metro_Council_Districts_1995_to_2002': {
                'name': 'Metro Council Districts 1995 to 2002',
                'url': '//library.oregonmetro.gov/rlisdiscovery/council1995.zip',
                'type': 'shapefile',
                'thumb': 'council.png',
                "symbolField": "DISTRICT",
                "legend": {
                    "symbols": [
                        {
                            "value": 1,
                            "color": "#CEEC3B"
                        },
                        {
                            "value": 2,
                            "color": "#41973A"
                        },
                        {
                            "value": 3,
                            "color": "#276A95"
                        },
                        {
                            "value": 4,
                            "color": "#FFC526"
                        },
                        {
                            "value": 5,
                            "color": "#FC8C58"
                        },
                        {
                            "value": 6,
                            "color": "#D63E50"
                        },
                        {
                            "value": 7,
                            "color": "#61A19A"
                        }
                    ]
                }
            },
            'Metro_Council_Districts_2003_to_2012': {
              'name': 'Metro Council Districts 2003 to 2012',
              'url': '//library.oregonmetro.gov/rlisdiscovery/council2003.zip',
              'type': 'shapefile',
              'thumb': 'council.png',
              "symbolField": "DISTRICT"
            },
            'Metro_Council_Districts': {
              'name': 'Metro Council Districts',
              'url': '//library.oregonmetro.gov/rlisdiscovery/council.zip',
              'type': 'shapefile',
              'thumb': 'council.png',
              "symbolField": "DISTRICT"
            },
            'County_Lines': {
                'name': 'County Lines',
                'url': '//library.oregonmetro.gov/rlisdiscovery/co_fill.zip',
                'type': 'shapefile',
                'thumb': 'co_fill.png',
                'symbolField':''
            },
            'Metro_Boundary': {
                'name': 'Metro Boundary',
                'url': '//library.oregonmetro.gov/rlisdiscovery/metro.zip',
                'type': 'shapefile',
                'thumb': 'metro.png'
            },
            'Urban_Growth_Boundary': {
                'name': 'Urban Growth Boundary',
                'url': '//library.oregonmetro.gov/rlisdiscovery/ugb.zip',
                'type': 'shapefile',
                'thumb': 'ugb.png'
            }
        },
        'Census':{

        }
    }
}
      </script>
    </body>
</html>



